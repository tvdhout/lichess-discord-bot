server_tokens off;
add_header X-Frame-Options SAMEORIGIN always;
add_header X-Content-Type-Options nosniff always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Strict-Transport-Security "max-age=31536000" always;
add_header Content-Security-Policy "default-src 'self'; frame-ancestors 'none'" always;
add_header Referrer-Policy "strict-origin" always;
add_header Access-Control-Allow-Origin "*" always;

ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate /etc/letsencrypt/live/lichess.moltres.nl/fullchain.pem;

limit_req_zone $binary_remote_addr zone=mylimit:10m rate=3r/s;

# Certbot HTTP challenge
server {
    listen 80;
#     listen [::]:80;
    server_name tvdh.dev;

    location /.well-known/acme-challenge/ {
        limit_req zone=mylimit burst=2 nodelay;
        root /var/www/certbot;
    }
}

# http://lichess.moltres.nl -> https://lichess.moltres.nl
server {
    listen 80;
#     listen [::]:80;
    server_name lichess.moltres.nl;

    return 301 https://$host$request_uri;
}

# serve https://lichess.moltres.nl
server {
    listen 443 ssl http2;
#     listen [::]:443 ssl http2;
    server_name lichess.moltres.nl;

    ssl_certificate /etc/letsencrypt/live/lichess.moltres.nl/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/lichess.moltres.nl/privkey.pem;

    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets on;

    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
    ssl_prefer_server_ciphers on;

    resolver 9.9.9.9 8.8.8.8 8.8.4.4;

    location / {
        limit_req zone=mylimit burst=15 nodelay;

        include uwsgi_params;
        uwsgi_pass localhost:8080;

        # when a client closes the connection then keep the channel to uwsgi open. Otherwise uwsgi throws an IOError
        # Thanks to https://stackoverflow.com/a/40375474
        uwsgi_ignore_client_abort on;
    }
}